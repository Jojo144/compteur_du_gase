# Generated by Django 2.2.5 on 2019-10-23 07:31

import base.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
            ],
            options={
                'verbose_name': 'Catégorie',
            },
        ),
        migrations.CreateModel(
            name='Household',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom qui apparaitra dans la liste des comptes pour faire ses achats.', max_length=200, verbose_name='nom du foyer')),
                ('number', models.IntegerField(default=0, validators=[base.models.validate_household_number], verbose_name="numero d'adhérent")),
                ('address', models.CharField(blank=True, help_text='Pas indispensable mais pratique quand on fait des réunions chez les uns les autres.', max_length=200, verbose_name='adresse')),
                ('comment', models.TextField(blank=True, verbose_name='commentaire')),
                ('account', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=10, verbose_name='solde du compte')),
                ('date', models.DateField(auto_now=True)),
                ('date_closed', models.DateField(blank=True, help_text='Remplir seulement si le foyer souhaite arrêter.', null=True, verbose_name='Date de clôture')),
                ('subscription', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="montant de la cotisation d'adhésion (en €)")),
                ('on_the_flight', models.BooleanField(default=False, help_text="Cette fonction peut être utilise si l'on autorise le payement à la volée, c'est-à-dire lorsque le client n'a pas besoin d'approvisionner son compte mais paye la juste somme.", verbose_name='Realise un approvisionnement automatique du montant du panier avant de payer.')),
            ],
            options={
                'verbose_name': 'Foyer',
            },
        ),
        migrations.CreateModel(
            name='LocalSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_account', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="seuil en dessous duquel on ne peut plus faire d'achat (en €)")),
                ('min_account_allow', models.BooleanField(default=False, help_text="Lorsque cette option est activée, si le solde n'est pas suffisant, il y a une demande de confirmationlors de l'achat mais il est autorisé. Dans le cas contraire, l'achat est rendu impossible.", verbose_name="Lorsque le solde n'est pas suffisant, autoriser quand même après demande de confirmation ?")),
                ('min_balance', models.DecimalField(decimal_places=2, default=10, max_digits=10, verbose_name='seuil en dessous duquel une alerte est lancée au moment de commencer un achat (en €)')),
                ('txt_home', models.TextField(blank=True, default='<i>Bienvenu·e au GASE</i>', verbose_name="texte de la page d'accueil (doit être donnée en code html)")),
                ('use_messages', models.BooleanField(default=True, help_text='La fonction messages/actions sert à laisser des messagesentre les différentes permanences ou lister des actions à faire.', verbose_name='Utilisation de la fonction messages/actions ?')),
                ('use_appro_kind', models.BooleanField(default=True, help_text='La fonction type de paiement permet de sauvegarder le moyen de paiement utilisé.', verbose_name='Utilisation de la fonction type de paiement ?')),
                ('use_subscription', models.BooleanField(default=True, help_text="La fonction adhésion permet de renseigner la cotisation d'adhésiond'adhésion du foyer.", verbose_name="Utilisation de la fonction cotisation d'adhésion ?")),
                ('use_cost_of_purchase', models.BooleanField(default=True, help_text="La fonction prix d'achat permet de spécifier un prix d'achat différent du prix de vente.", verbose_name="Utilisation de la fonction prix d'achat ?")),
                ('use_exports', models.BooleanField(default=True, help_text="Exports de l'historique d'achat et de la liste des produits.", verbose_name='Utiliser les exports ?')),
                ('use_logo', models.BooleanField(default=True, help_text='Le fichier de logo doit être placé dans le répertoire base\\static\x08ase et son nom de fichier doit etre logo.png.', verbose_name='Affiche le logo dans la première page ?')),
                ('use_favicon', models.BooleanField(default=True, help_text='Le fichier favicon doit être placé dans le répertoire base\\static\x08ase et son nom de fichier doit etre favicon.ico.', verbose_name='Affiche une favicon ?')),
                ('use_mail', models.BooleanField(default=True, help_text="Cette fonction permet d'envoyer les tickets de caisse ou des alertes stocks aux référents des produits.", verbose_name="Utilisation de la fonction envoi d'email ?")),
                ('save_mail', models.BooleanField(default=True, help_text='Cette fonction permet de sauvegarder les emails envoyés ou en attente.', verbose_name='Utilisation de la fonction de sauvegarde des emails ?')),
                ('prefix_object_mail', models.CharField(blank=True, default='', help_text='Un prefix est souvent encadré par des crochers, exemples : [GASE].', max_length=15, verbose_name="Prefix dans l'objet des emails.")),
                ('debug_mail', models.CharField(blank=True, default='', help_text='Ce champ permet de tester la fonction email sans envoyer de mails intempestifs.', max_length=50, verbose_name='Si ce champ est renseigné, tous les emails lui seront envoyés.')),
                ('mail_host', models.CharField(default='xxx', help_text='Exemple : smtp.titi.com.', max_length=50, verbose_name="Hebergeur pour l'envoi des mails.")),
                ('mail_port', models.IntegerField(default=465, help_text='Exemple : 25 (sans chiffrement), 465 (chiffrement implicite, SSL), 587 (chiffrement explicite, TLS).', verbose_name="Port smtp pour l'envoi des mails.")),
                ('mail_protocole', models.CharField(choices=[('no', 'Pas de chiffrement'), ('tls', 'Utiliser TLS'), ('ssl', 'Utiliser SSL')], default='no', max_length=100, verbose_name="Protocole utilisé pour l'envoie de mails.")),
                ('mail_timeout', models.IntegerField(default=4, verbose_name="Timeout pour l'envoi de mail.")),
                ('mail_username', models.CharField(default='tata@titi.com', help_text='Exemple : tata@titi.com.', max_length=100, verbose_name="Nom d'utilisateur pour l'envoi des mails.")),
                ('mail_passwd', models.CharField(default='xxx', max_length=100, verbose_name="Mot de passe pour l'envoi des mails.")),
            ],
            options={
                'verbose_name': 'Réglages divers',
                'verbose_name_plural': 'Réglages divers',
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('message', models.TextField(verbose_name='Message')),
                ('subject', models.TextField(verbose_name='Sujet')),
                ('recipients', models.TextField(verbose_name='Destinataires')),
                ('send', models.BooleanField(default=False, verbose_name='Message envoyé ?')),
                ('kind', models.CharField(choices=[('referent', 'Référent'), ('receipt', 'Ticket de caisse')], default='referent', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('tel', models.CharField(blank=True, max_length=200, verbose_name='numéro de téléphone')),
                ('receipt', models.BooleanField(default=False, verbose_name='recevoir un ticket de caisse par mail ?')),
                ('stock_alert', models.BooleanField(default=False, verbose_name='recevoir les approvisionnements et les alertes stock par mail ? (uniquement pour les référents produit)')),
                ('household', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='has_household', to='base.Household', verbose_name='foyer')),
            ],
            options={
                'verbose_name': 'Membre',
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('contact', models.TextField(blank=True, verbose_name='mail / téléphone / adresse du fournisseur')),
                ('comment', models.TextField(blank=True, verbose_name='commentaire (quel Gasier a été en contact, historique des échanges, ...)')),
            ],
            options={
                'verbose_name': 'Fournisseur',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('vrac', models.BooleanField(help_text='Oui pour kg, L, ... Non pour sachet, bouteille, ...', verbose_name='Vrac')),
                ('pluralize', models.BooleanField(default=False, help_text="Ajouter un 's' au pluriel (par ex. 4 sachets mais 4 kg)", verbose_name='Plurieliser ?')),
            ],
            options={
                'verbose_name': 'Unité',
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Household')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name="prix de vente (en €) à l'unité (kg/L/...)")),
                ('cost_of_purchase', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name="prix d'achat (en €) à l'unité (kg/L/...)")),
                ('pwyw', models.BooleanField(default=False, help_text='Pas encore géré par le logiciel ...', verbose_name='prix libre')),
                ('visible', models.BooleanField(default=True, help_text="Une référence non visible n'apparait pas dans les produits que l'on peut acheter, on l'utilise généralement pour les produits en rupture de stock", verbose_name='visible')),
                ('stock_alert', models.DecimalField(blank=True, decimal_places=2, help_text="Laisser vide pour pas d'alerte", max_digits=10, null=True, verbose_name="Seuil de l'alerte stock")),
                ('comment', models.TextField(blank=True, verbose_name='commentaire')),
                ('stock', models.DecimalField(decimal_places=3, default=0, editable=False, max_digits=15, verbose_name='stock')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Category', verbose_name='catégorie')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Provider', verbose_name='fournisseur')),
                ('referent', models.ForeignKey(blank=True, help_text='S\'il le souhaite, le référent reçoit un mail à chaque fois qu\'un produit est approvisionné ou que le stock devient plus bas que le niveau "Alerte stock"', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Member', verbose_name='référent')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Unit', verbose_name='unité')),
            ],
            options={
                'verbose_name': 'Produit',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('message', models.TextField(verbose_name='Message')),
                ('read', models.BooleanField(default=False, verbose_name='Message lu ?')),
                ('action', models.BooleanField(default=False, help_text="Si aucune action n'est nécessaire, côcher cette case.", verbose_name='Action(s) réalisée(s) ?')),
                ('who', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Member', verbose_name='Auteur')),
            ],
        ),
        migrations.CreateModel(
            name='ChangeStockOp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=15)),
                ('price', models.DecimalField(decimal_places=3, max_digits=15)),
                ('purchase_cost', models.DecimalField(decimal_places=3, default=0, max_digits=15)),
                ('stock', models.DecimalField(decimal_places=3, max_digits=15)),
                ('label', models.CharField(max_length=20)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApproCompteOp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('kind', models.CharField(choices=[('cash', 'Espèces'), ('cheque', 'Chèque'), ('cancellation', 'Annulation/Correction'), ('repayment', 'Remboursement'), ('ontheflight', 'A la volée')], default='cash', max_length=6, null=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Household')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseDetailOp',
            fields=[
                ('changestockop_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.ChangeStockOp')),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Purchase')),
            ],
            options={
                'abstract': False,
            },
            bases=('base.changestockop',),
        ),
    ]
